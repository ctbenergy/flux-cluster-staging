---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: mailu
  namespace: kube-system
spec:
  interval: 5m
  chart:
    spec:
      chart: mailu
      version: 0.3.3
      sourceRef:
        kind: HelmRepository
        name: mailu-charts
        namespace: flux-system
      interval: 5m
  values:
    # renovate: githubReleaseVar repo=mailu/mailu
    mailuVersion: 1.9.43
    domain: "${SECRET_DOMAIN}"
    hostnames:
      - "mail.${SECRET_DOMAIN}"
    # The secret key is required for protecting authentication cookies and must be set individually for each deployment
    secretKey: "${SECRET_MAILU_SECRET_KEY}"
    # An initial account can automatically be created:
    initialAccount:
      domain: "${SECRET_DOMAIN}"
      username: ${SECRET_MAILU_ADMIN_USER}
      password: "${SECRET_MAILU_ADMIN_PASSWORD}"
    database:
      # type of the database for mailu (sqlite or mysql)
      # default database is an embedded sqlite
      # for mysql, see settings below
      type: postgresql
      # type of the database for roundcube (sqlite or mysql)
      # default database is an embedded sqlite
      # for mysql, see settings below
      roundcubeType: postgresql
      # For an external PostgreSQL database, use the following config:
      postgresql:
        host: mailu-postgresql
        database: mailu
        user: mailu
        password: ${SECRET_MAILU_DB_PASSWORD}
        roundcubeDatabase: mailu
        roundcubeUser: mailu
        roundcubePassword: ${SECRET_MAILU_DB_PASSWORD}
    persistence:
      # Setings for a single volume for all apps
      # set single_pvc: false to use a per app volume and set the properties in <app>.persistence (ex. admin.persistence)
      single_pvc: true
      existingClaim: mailu-storage
    # Change this if you're using different address ranges for pods
    subnet: ${NETWORK_K8S_CLUSTER_CIDR}
    # default log level. can be overridden globally or per service
    logLevel: WARNING
    # local part of the postmaster email address (Mailu will use @$DOMAIN as domain part)
    postmaster: ${SECRET_MAILU_ADMIN_USER}
    mail:
      messageSizeLimitInMegabytes: 50
      # Configuration to prevent brute-force attacks. See the documentation for further information: https://mailu.io/master/configuration.html
      authRatelimitIP: 60/hour
      authRatelimitIPv4Mask: 24
      authRatelimitIPv6Mask: 56
      authRatelimitUser: 100/day
      authRatelimitExemtionLength: 86400
      # authRatelimitExemtion:
      # Configuration to reduce outgoing spam in case of an compromised account. See the documentation for further information: https://mailu.io/1.9/configuration.html?highlight=MESSAGE_RATELIMIT
      messageRatelimit: 200/day
      # messageRatelimitExemption:
    # certmanager settings
    certmanager:
      enabled: true
      apiVersion: cert-manager.io/v1
      issuerName: letsencrypt-staging
    # Set ingress and loadbalancer config
    ingress:
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
        external-dns/is-public: "true"
        nginx.ingress.kubernetes.io/whitelist-source-range: "${NETWORK_K8S_CLUSTER_CIDR}"
      hosts:
        - "mail.${SECRET_DOMAIN}"
      tls:
        hosts:
          - "mail.${SECRET_DOMAIN}"
    # Frontend load balancer for non-HTTP(s) services
    front:
      # logLevel: WARNING
      image:
        repository: mailu/nginx
        # tag defaults to mailuVersion
        # tag: master
      resources:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 200Mi
          cpu: 200m
      startupProbe:
        periodSeconds: 10
        failureThreshold: 30
        timeoutSeconds: 5
      livenessProbe:
        periodSeconds: 10
        failureThreshold: 3
        timeoutSeconds: 5
      readinessProbe:
        periodSeconds: 10
        failureThreshold: 1
        timeoutSeconds: 5
      # Deployment or DaemonSet
      controller:
        kind: Deployment
      nodeSelector: {}
      # Expose front mail ports via hostPort
      hostPort:
        enabled: true
    admin:
      # logLevel: WARNING
      image:
        repository: mailu/admin
        # tag defaults to mailuVersion
        # tag: master
      persistence:
        size: 20Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      resources:
        requests:
          memory: 500Mi
          cpu: 500m
        limits:
          memory: 500Mi
          cpu: 500m
    redis:
      image:
        repository: redis
        tag: 7-alpine
      persistence:
        size: 20Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      resources:
        requests:
          memory: 200Mi
          cpu: 100m
        limits:
          memory: 300Mi
          cpu: 200m
      startupProbe:
        periodSeconds: 10
        failureThreshold: 30
        timeoutSeconds: 5
      livenessProbe:
        periodSeconds: 10
        failureThreshold: 3
        timeoutSeconds: 5
      readinessProbe:
        periodSeconds: 10
        failureThreshold: 1
        timeoutSeconds: 5
    postfix:
      # logLevel: WARNING
      image:
        repository: mailu/postfix
        # tag defaults to mailuVersion
        # tag: master
      containerSecurityContext: {}
      #    CRI-O users will need to add the following:
      #    capabilities:
      #      add:
      #        - SYS_CHROOT
      persistence:
        size: 20Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      resources:
        requests:
          memory: 2Gi
          cpu: 500m
        limits:
          memory: 2Gi
          cpu: 500m
      startupProbe:
        periodSeconds: 10
        failureThreshold: 30
        timeoutSeconds: 5
      livenessProbe:
        periodSeconds: 10
        failureThreshold: 3
        timeoutSeconds: 5
      readinessProbe:
        periodSeconds: 10
        failureThreshold: 1
        timeoutSeconds: 5
    rspamd:
      # logLevel: WARNING
      image:
        repository: mailu/rspamd
        # tag defaults to mailuVersion
        # tag: master
      persistence:
        size: 1Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      resources:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 200Mi
          cpu: 200m
      startupProbe: # give it 15 minutes for initial rule compilation
        periodSeconds: 10
        failureThreshold: 90
        timeoutSeconds: 5
      livenessProbe:
        periodSeconds: 10
        failureThreshold: 3
        timeoutSeconds: 5
      readinessProbe:
        periodSeconds: 10
        failureThreshold: 1
        timeoutSeconds: 5
    dovecot:
      enabled: true
      # logLevel: WARNING
      image:
        repository: mailu/dovecot
        # tag defaults to mailuVersion
        # tag: master
      containerSecurityContext: {}
    #    CRI-O users will need to add the following:
    #    capabilities:
    #      add:
    #        - SYS_CHROOT
      persistence:
        size: 20Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      resources:
        requests:
          memory: 500Mi
          cpu: 500m
        limits:
          memory: 500Mi
          cpu: 500m
      startupProbe:
        periodSeconds: 10
        failureThreshold: 30
        timeoutSeconds: 5
      livenessProbe:
        periodSeconds: 10
        failureThreshold: 3
        timeoutSeconds: 5
      readinessProbe:
        periodSeconds: 10
        failureThreshold: 1
        timeoutSeconds: 5
      # enable dovecot overrides
      # overrides:
      #   dovecot.conf: |
      #     # More info here: https://mailu.io/1.8/kubernetes/mailu/index.html#dovecot
      #     mail_nfs_index = yes
      #     mail_nfs_storage = yes
      #     mail_fsync = always
      #     mmap_disable = yes
      #     mail_max_userip_connections=100
    # historically rspamd and clamav shared their volumes in this chart
    # this isn't needed anymore. to maintain backward compatibility and give users
    # some time to migrate we keep this here.
    #
    # if you want a "shared" volume keep in mind you have to use affinity rules on
    # rspamd and clamav pods so that both pods are scheduled on the same node
    # to keep RWO volumes working
    #
    # otherwise set rspamd_clamav_persistence.single_pvc to true and review
    # rspamd.persistence and clamav.persistence
    rspamd_clamav_persistence:
      size: 20Gi
      storageClass: ""
      accessMode: ReadWriteOnce
      claimNameOverride: ""
      single_pvc: false
      #annotations:
      #  "helm.sh/resource-policy": keep
    clamav:
      enabled: true
      # logLevel: WARNING
      image:
        repository: mailu/clamav
        # tag defaults to mailuVersion
        # tag: master
      persistence:
        size: 2Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      resources:
        requests:
          memory: 1Gi
          cpu: 1000m
        limits:
          memory: 2Gi
          cpu: 1000m
      startupProbe: # give it 10 minutes for initial freshclam update
        periodSeconds: 10
        failureThreshold: 60
        timeoutSeconds: 5
      livenessProbe:
        periodSeconds: 10
        failureThreshold: 3
        timeoutSeconds: 5
      readinessProbe:
        periodSeconds: 10
        failureThreshold: 1
        timeoutSeconds: 5
      # clamav must share a volume with rspamd. This is usually enforced by the volume itself (RWO).
      # If you use RWM volumes and want to
      # have clamav running on the same node, add the following affinity rule:
      # affinity:
      #   podAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       - labelSelector:
      #           matchExpressions:
      #             - key: component
      #               operator: In
      #               values:
      #                 - rspamd
      #         topologyKey: kubernetes.io/hostname
    roundcube:
      enabled: true
      # logLevel: WARNING
      image:
        repository: mailu/roundcube
        # tag defaults to mailuVersion
        # tag: master
      persistence:
        size: 20Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      uri: /roundcube
      resources:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 200Mi
          cpu: 200m
      startupProbe:
        periodSeconds: 10
        failureThreshold: 30
        timeoutSeconds: 5
      livenessProbe:
        periodSeconds: 10
        failureThreshold: 3
        timeoutSeconds: 5
      readinessProbe:
        periodSeconds: 10
        failureThreshold: 1
        timeoutSeconds: 5
    webdav:
      enabled: false
      # logLevel: WARNING
      image:
        repository: mailu/radicale
        # tag defaults to mailuVersion
        # tag: master
      persistence:
        size: 20Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      startupProbe:
        periodSeconds: 10
        failureThreshold: 30
        timeoutSeconds: 5
      livenessProbe:
        periodSeconds: 10
        failureThreshold: 3
        timeoutSeconds: 5
      readinessProbe:
        periodSeconds: 10
        failureThreshold: 1
        timeoutSeconds: 5

    mysql:
      image:
        repository: library/mariadb
        tag: 10.4.10
      persistence:
        size: 20Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 512Mi
          cpu: 200m
      startupProbe:
        periodSeconds: 10
        failureThreshold: 30
        timeoutSeconds: 5
      livenessProbe:
        periodSeconds: 10
        failureThreshold: 3
        timeoutSeconds: 5
      readinessProbe:
        periodSeconds: 10
        failureThreshold: 1
        timeoutSeconds: 5

    fetchmail:
      enabled: false
      # logLevel: WARNING
      image:
        repository: mailu/fetchmail
        # tag defaults to mailuVersion
        # tag: master
      persistence:
        size: 20Gi
        storageClass: ""
        accessMode: ReadWriteOnce
        claimNameOverride: ""
        #annotations:
        #  "helm.sh/resource-policy": keep
      resources:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 200Mi
          cpu: 200m
      delay: 600
  postRenderers:
    - kustomize:
        patchesJson6902:
          - target:
              kind: Deployment
              name: mailu-front
            patch:
              - op: add
                path: /spec/template/spec/hostname
                value: mailu-front
